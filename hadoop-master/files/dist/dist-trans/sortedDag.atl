-- @atlcompiler emftvm

-- @nsURI S=http://fr.inria.atlanmod/dag
-- @nsURI T=http://fr.inria.atlanmod/sortedDag


module sortedDag;

create OUT : T from IN : S;


helper def : getRootNodes() : Sequence(S!Vertex) = 
	S!Vertex.allInstances() -> select(v | v.incoming -> isEmpty() );

helper def : rndInt(size : Integer) : Integer =  
	let rnd : "#native"!"java::util::Random" = "#native"!"java::util::Random".newInstance() in
 	"#native"!"java::util::Random".abs(rnd.nextInt(size));

helper def : ROOT_GRAPH : S!DAG = S!DAG.allInstances() -> first();

rule dag2sortedDag {
	from 
		d : S!DAG
	to 
		sd : T!SortedGraph (
			rootNodes <- thisModule.getRootNodes()
			)
}

rule vertex2node {
	from 
		v : S!Vertex
	to
		n : T!Node(
			id <- v.id,
			owner <- if v.incoming.oclIsUndefined() then 
						OclUndefined
					else 
						if  v.incoming -> size() < 0 then
						v.incoming -> at (thisModule.rndInt(v.incoming-> size().debug()))
					 	else
					 		OclUndefined
						endif
					endif

			)
}