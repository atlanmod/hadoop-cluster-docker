-- @path GRP=/StructureGraph/metamodels/FlowGraph.ecore
-- @atlcompiler emftvm


module Flow2Data_tvm;
create OUT : GRP from IN : GRP;

helper def : ALL_FLOWINSTRS : Sequence(GRP!FlowInstr) =  GRP!FlowInstr.allInstances();

helper context GRP!FlowInstr def : getForbidden(var : GRP!Var) : Sequence(GRP!SimpleStmt) =
	thisModule.ALL_FLOWINSTRS->reject(fi | fi = self)->select(fi | fi.def->exists(d | d = var));

helper context OclAny def : isInALoop : Boolean =
	if self.oclIsTypeOf(GRP!Loop) then
		true 
	else
		if self.oclIsTypeOf(GRP!Method) then
			false
		else
			self.refImmediateComposite().isInALoop
		endif
	endif;

helper context GRP!FlowInstr def : getFlowInstrsUsingVar(var : GRP!Var) : Sequence(GRP!SimpleStmt) =
	thisModule.ALL_FLOWINSTRS->reject(fi | if fi = self then not fi.isInALoop else false endif)
								->select(fi | fi.use->exists(u | u = var));

helper def : isDefinedBy(start : GRP!FlowInstr, input : Sequence(GRP!FlowInstr), end : GRP!FlowInstr, visited : Sequence(GRP!FlowInstr), forbidden : Sequence(GRP!FlowInstr)) : Boolean =
	if input->exists(i | i = end) then
		true
	else
		let newInput : Sequence(GRP!FlowInstr) = input->collect(i | i.cfPrev)->flatten()->reject(i | visited->exists(v | v = i) or forbidden->exists(f | f = i)) in
		if newInput->isEmpty() then
			false
		else
			thisModule.isDefinedBy(start, newInput, end, visited->union(newInput)->asSet()->asSequence(), forbidden)
		endif
	endif;

abstract rule Item {
	from 
		s: GRP!Item
	to 
		t: GRP!Item (
			txt <- s.txt
			)
}


--abstract rule Stmt {
--	from 
--		s : GRP!Stmt
--	to 
--		t : GRP!Stmt 
--}


-- @extends Item

abstract rule FlowInstr {
	from
		s : GRP!FlowInstr
	to
		t : GRP!FlowInstr (
			def <- Sequence{},
			use <- Sequence{},
			cfNext <- s.cfNext,
			cfPrev <- s.cfPrev,
			dfNext <- if not s.oclIsTypeOf(GRP!Method) 
							then s.dfNext
					  else 
					  	Sequence{}
					  endif
		)
}

-- @extends Block, FlowInstr
rule Method  {
	from
		s : GRP!Method
	to
		t : GRP!Method (
			exit <- s.exit,
			vars <- Sequence{},
			dfNext <-	s.def->collect(d | s.getFlowInstrsUsingVar(d)->select(fi | thisModule.isDefinedBy(fi, Sequence{fi}, s, Sequence{}, s.getForbidden(d))))->flatten()
--			.debug
--			(
--				s.txt + ' -> ' +
--				s.def->collect(d | s.getFlowInstrsUsingVar(d)->select(fi | thisModule.isDefinedBy(fi, Sequence{fi}, s, Sequence{}, s.getForbidden(d))))->flatten()
--						->collect(cfn | cfn.txt)
--			)
		)
}

-- @extends FlowInstr
rule SimpleStmt {
	from
		s : GRP!SimpleStmt
	to
		t : GRP!SimpleStmt (
			dfNext <- s.getFlowInstrsUsingVar(s.def->first())->select(fi | thisModule.isDefinedBy(fi, Sequence{fi}, s, Sequence{}, s.getForbidden(s.def->first())))
--			.debug
--			(
--				s.txt + ' -> ' +
--				s.getFlowInstrsUsingVar(s.def->first())->select(fi | thisModule.isDefinedBy(fi, Sequence{fi}, s, Sequence{}, s.getForbidden(s.def->first())))
--													->collect(cfn | cfn.txt)
--			)
		)
}

-- @extends Item
rule Block {
	from 
		s : GRP!Block
	to
		t : GRP!Block (
			stmts <- s.stmts	
		)
}

-- @extends Item
abstract rule Conditional {
	from 
		s: GRP!Conditional
	to	
		t: GRP!Conditional (
			expr <- s.expr	
		)
		
}

-- @extends Conditional
rule If {
	from 
		s: GRP!If
	to
		t: GRP!If(
			else <- s.else,
			then <- s.then
		)
}

-- @extends  FlowInstr
rule Return {
	from
		s : GRP!Return
	to
		t : GRP!Return
}


-- @extends Item 
rule Var {
	from
		s : GRP!Var
	to
		t : GRP!Var (
			definers <:= Sequence{},
			users <:= Sequence{}
		)
}

-- @extends FlowInstr

rule Exit {
	from 
		s: GRP!Exit
	to
		t: GRP!Exit
}

-- @extends Conditional

rule Loop {
	from 
		s: GRP!Loop
	to	
		t: GRP!Loop (
			body <-	s.body
		)
}

-- @extends FlowInstr
abstract rule JumpStmt {
	from 
		s : GRP!JumpStmt
	to
		t : GRP!JumpStmt (
			label <- s.label	
		)			
}

-- @extends JumpStmt

rule Break {
	from 
		s:GRP!Break
	to
		t:GRP!Break
}

-- @extends JumpStmt
rule Continue {
	from 
		s:GRP!Continue
	to
		t:GRP!Continue
}

-- @extends Var
rule Param {
	from 
		s:GRP!Param
	to
		t:GRP!Param
}

-- @extends Item 
rule Label {
	from 
		s : GRP!Label
	to 
		t :GRP!Label (
			stmt <- s.stmt,
			jumps <- s.jumps
		)
}

--@extends FlowInstr
rule Expr {
	from 
		s : GRP!Expr
	to 
		t : GRP!Expr
}
